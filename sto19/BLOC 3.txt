<!-- main app container -->
<div class="card m-3">
    <h5 class="card-header">Aide et contact par formulaire en ligne</h5>
    <div class="card-body">
        <form [formGroup]='registerForm' (ngSubmit)="onSubmit()">

            <div class="col-3 mb-3">
                <label class="form-label">Categories </label>
                <select id="categoriesList" formControlName="categoriesList"
                    [ngClass]="{ 'is-invalid': submitted && registerForm.get('categoriesList')?.errors }"
                    (ngModelChange)="setAnotherSelect(+$event)">
                    <select [ngModel]="categorySelected" [ngModelOptions]="{standalone: true}"></select>
                    <option value="-1"></option>
                    <option *ngFor="let c of categories" value={{c.id}}>{{ c.name }}</option>
                </select>
                <div *ngIf="submitted && registerForm.get('categoriesList')?.hasError " class="invalid-feedback">
                    <div *ngIf="registerForm.get('categoriesList')?.hasError('required')"> categoriesList is required
                    </div>
                </div>
            </div>

            <select id="sousCategoriesList" formControlName="sousCategoriesList" *ngIf="showsousCategorie">
                <select [ngModel]="sousCategorie" [ngModelOptions]="{standalone: true}"></select>
                <option value="-1"></option>
                <option *ngFor="let element of sousCategorie" value="{{ element.id }}">{{ element.name }}</option>
            </select>

            <div class="col-3 mb-3">
                <label class="form-label">First Name</label>
                <input type="firstName" formControlName="firstName" class="form-control"
                    [ngClass]="{ 'is-invalid': submitted && registerForm.get('firstName')?.errors }" />
                <div *ngIf="submitted && registerForm.get('firstName')?.hasError " class="invalid-feedback">
                    <div *ngIf="registerForm.get('firstName')?.hasError('required')">First Name is required</div>
                </div>
            </div>

            <div class="col-3 mb-3">
                <label class="form-label">Mon message </label>
                <textarea formControlName="message" [ngClass]="{ 'is-invalid': submitted && registerForm.get('message')?.errors }" placeholder="Bonjour, Je vous contacte pour …
            Réponse limitée à 4000 caractères. Merci. " [attr.disabled]="words >4000 ? '' : null" (keydown)="wordCounter()" #text id="wmd-input"
                name="post-text" class="wmd-input s-input bar0 js-post-body-field processed" data-post-type-id="2"
                cols="62" rows="10" tabindex="4001" data-min-length="" oncopy="return false;" onpaste="return false;"
                oncut="return false;"></textarea>
            <div>Words:<span id="wordCount">{{ words }}</span></div>
                    
                <div *ngIf="submitted && registerForm.get('message')?.hasError " class="invalid-feedback">
                    <div *ngIf="registerForm.get('message')?.hasError('required')"> message is required</div>
                </div>
            </div>


            

            <div class="form-check mb-3">
                <input type="checkbox" formControlName="acceptTerms" id="acceptTerms" class="form-check-input"
                    [ngClass]="{ 'is-invalid': submitted && registerForm.get('acceptTerms')?.errors }" />
                <label for="acceptTerms" class="form-check-label">Accept Terms & Conditions</label>
                <div *ngIf="submitted && registerForm.get('acceptTerms')?.hasError " class="invalid-feedback">
                    Accept Ts & Cs is required
                </div>
            </div>

            <button class="btn btn-primary me-2">Register</button>

        </form>
    </div>
</div>











import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';
import { ICategoryStructure } from './formulairemodel';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
@Component({
  selector: 'app-formulaire',
  templateUrl: './formulaire.component.html',
  styleUrls: ['./formulaire.component.css']
})
export class FormulaireComponent implements OnInit {
  maxChars = 5;

  wordCount: any;

  @ViewChild("text") text: ElementRef;
  words: any;
  wordCounter() {
    //alert(this.text.nativeElement.value)
    this.wordCount = this.text ? this.text.nativeElement.value.split(/\s+/) : 0;
    this.words = this.wordCount ? this.wordCount.length : 0;
  }


  
  registerForm!: FormGroup;
  submitted = false;

  countries = ['USA', 'FR', 'Canada'];
  default = 'FR';

  numberCode = ['PR(0032)', 'FR(+33)', 'IS(+35)'];
  defaultCode = 'FR(+33)';

  constructor(private formBuilder: FormBuilder) { }

  ngOnInit() {
    this.registerForm = this.formBuilder.group({
      categoriesList: ['', Validators.required],
      sousCategoriesList: ['', Validators.required],
      firstName: ['', Validators.required],
      lastName: ['', Validators.required],
      telephone: ['', [Validators.required, Validators.pattern("^[0-9]*$"), Validators.minLength(3), Validators.maxLength(10)]],
      selectphone: ['FR(+33)', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      pays: ['FR', Validators.required],

      // validates date format yyyy-mm-dd
      dob: ['', [Validators.required, Validators.pattern(/^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$/)]],
      message: ['', Validators.required], 
      acceptTerms: [false, Validators.requiredTrue]
    });
  }




  public categories: ICategoryStructure[] = [
    { id: 1, name: 'Probleme de connexion', description: 'description1', blogIds: [1, 2] },
    { id: 2, name: 'Devenir actionnaire', description: 'description2', blogIds: [3, 4] },

  ];

  public categorySelected: number = -1;
  public sousCategorie: ICategoryStructure[] = [];
  public sousCategorieSelected: number = -1;
  public showsousCategorie = false;

  public setAnotherSelect(numberId: number) {
    this.categorySelected = numberId;
    this.showsousCategorie = true;
    this.sousCategorie = [];
    switch (numberId) {
      case 1:
        this.sousCategorie = [
          { id: 4, name: 'Probléme à recourir à mes accés (identifiant)', description: 'description4', blogIds: [7, 8] },
          { id: 5, name: 'Problème à recourir à mes accès (mot de passe)', description: 'description5', blogIds: [9, 10] },
        ];
        break;
      case 2:
        this.sousCategorie = [
          { id: 6, name: 'test7', description: 'description7', blogIds: [11, 12] },
          { id: 7, name: 'test8', description: 'description8', blogIds: [13, 14] },

        ];
        break;
      default:
        this.showsousCategorie = false;
        break;
    }
  }


  // convenience getter for easy access to form fields
  get f() { return this.registerForm.controls; }

  onSubmit() {
    this.submitted = true;

    // stop here if form is invalid
    if (this.registerForm.invalid) {
      return;
    }

    // display form values on success
    alert('SUCCESS!! :-)\n\n' + JSON.stringify(this.registerForm.value, null, 4));
  }
}








